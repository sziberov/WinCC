--Boot Functions--
function centerText(text, line)
	x,y = term.getSize()
	term.setCursorPos(math.ceil((x / 2) - (text:len() / 2)), line)
	term.write(text)
end

local x,y = term.getSize()

function clear()
term.clear()
end

--Starting Boot--
term.clear()
term.setBackgroundColor(colors.black)
term.clear()
sleep(1.0)

--printBootScreen()--


local processes = {}
local activeProcesses = {}
local eventHandlers = {}
local config = { timer = 0.1, desktop_color = colors.cyan, version = "0.9" }
local running = true
local screen = nil
local clipboard = { data = nil, dType = "null" }

local lastCursorBlink = false
local lastMenu = nil
local systemMessage = nil

local CURRENT_PROCESS = 0
local ACTIVE_PROCESS = 0
local NEW_ACTIVE_PROCESS = 0
local TASKBAR_PROCESS = 0
local DESKTOP_PROCESS = 0
local SHUTDOWN_PROCESS = 0

local ETIME = 0
local PROCESS_MAX_ITERATIONS = 10

local LASTHWND = 10
local CARETX = 0
local CARETY = 0
local CARETV = false
local CARETCOLOR = colors.black

local legacyShell = shell




function table.val_to_str ( v )
  if "string" == type( v ) then
    v = string.gsub( v, "\n", "\\n" )
    if string.match( string.gsub(v,"[^'\"]",""), '^"+$' ) then
      return "'" .. v .. "'"
    end
    return '"' .. string.gsub(v,'"', '\\"' ) .. '"'
  else
    return "table" == type( v ) and table.tostring( v ) or
      tostring( v )
  end
end

function table.key_to_str ( k )
  if "string" == type( k ) and string.match( k, "^[_%a][_%a%d]*$" ) then
    return k
  else
    return "[" .. table.val_to_str( k ) .. "]"
  end
end

function table.tostring( tbl )
  local result, done = {}, {}
  for k, v in ipairs( tbl ) do
    table.insert( result, table.val_to_str( v ) )
    done[ k ] = true
  end
  for k, v in pairs( tbl ) do
    if not done[ k ] then
      table.insert( result,
        table.key_to_str( k ) .. "=" .. table.val_to_str( v ) )
    end
  end
  return "{" .. table.concat( result, "," ) .. "}"
end

function string.ends(String,End)
   return End=='' or string.sub(String,-string.len(End))==End
end









local function pullEvent(filter)
	local message = GetMessage(GetCurrentProcess())

	if message ~= nil then
		if ((filter == message.msg) and (filter ~= nil)) or (filter == nil) then
			if message.msg == "char" then
				return message.msg, message.char
			end
			if message.msg == "key" then
				return message.msg, message.key
			end
			if message.msg == "mouse_click" then
				return message.msg, message.button, message.x, message.y
			end
			if message.msg == "mouse_drag" then
				return message.msg, message.button, message.x, message.y
			end
			if message.msg == "mouse_scroll" then
				return message.msg, message.button, message.n
			end
		end
	else
		return pullEvent(filter)
	end
end

local oldFsExists = fs.exists

--fs.exists = function(path)
--	if string.find(path, "home:/") then
		--path = string.gsub(path, "home:/", "", 1)
--	end

--	oldFsExists(path)
--end
function getPath(path)
	if string.find(path, "home:/") then
		path = string.gsub(path, "home:/", "", 1)
	end

	return path
end



function GetCurrentProcess()
	return CURRENT_PROCESS
end

function GetProcessInfo(hwnd)
	if hwnd > 0 then
		return processes[hwnd]
	else
		return {}
	end
end


function Shell(command)
	local path = { GetOsPath() .. "/ProgramFiles/" }
	local name = ""

	local cmd = pathutils.expand(command)

	if string.starts(cmd[1], "home:/") then
		path = { pathutils.extractFilePath(cmd[1]) }
		name = pathutils.extractFileName(cmd[1])

		--error(path[1])
	else
		--error(command)
		--error(cmd[2])
		table.insert(path, pathutils.extractFilePath(cmd[1]))
		name = cmd[1]
	end

	--error(name .. " " .. path[1])
	ShellRun(name, cmd, path)
end


local function CreateProcess(fileName, params, kernelMode)
	local hwnd = LASTHWND--10000
	local x, y = term.getSize()

	while (processes[hwnd] ~= nil) do
		--hwnd = math.random(65534) + 1
		hwnd = hwnd + 1
	end

	LASTHWND = hwnd


	local canvas = user.CreateCanvas(x, y - 1)
	canvas.autoScroll = true

	local process = {
		hwnd = hwnd,
		fileName = fileName,
		thread = nil,
		canvas = canvas,
		title = fs.getName(fileName),
		suspended = false,
		env = nil,
		messages = {},
		showInTaskbar = true,
		message = nil,
		etime = 0,
		iterations = 0,
		legacyMode = true,
	}

	if string.ends(fileName, ".exe") then
		process.legacyMode = false
	end


	local program = assert(loadfile(fileName), "File '" .. fileName .. "' not found.")
	process.program = program
	local timer = {
			enabled = false,
			interval = 0,
			value = 0,
			onTimer = nil,
		}


	--local nativeCanvas = {}
	--if process.legacyMode or true then
	local width, height = term.getSize()
	local nativeCanvas = window.create(term.native(), 1, 2, width, height - 2)
	nativeCanvas.setBackgroundColor(colors.black)
	nativeCanvas.setTextColor(colors.white)
	nativeCanvas.setCursorPos(1, 2)
	nativeCanvas.setCursorBlink(false)
	nativeCanvas.setVisible(false)
	--end

	legacyShell = {}

	local legacyEnv = {
		error = error,
		pcall = pcall,
		xpcall = xpcall,
		tostring = tostring,
		tonumber = tonumber,
		pairs = pairs,
		ipairs = ipairs,
		assert = assert,

		dofile = dofile,
		getfenv = getfenv,
		getmetatable = getmetatable,
		load = load,
		loadfile = loadfile,
		loadstring = loadstring,
		module = module,
		next = next,
		pcall = pcall,
		rawequal = rawequal,
		rawget = rawget,
		rawset = rawset,
		require = require,
		select = select,
		setfenv = setfenv,
		setmetatable = setmetatable,
		type = type,
		unpack = unpack,
		xpcall = xpcall,
		print = print,
		read = read,
		write = nativeCanvas.write,
		printError = printError,

		bit = bit,
		colors = colors,
		colours = colors,
		coroutine = coroutine,
		disk = disk,
		fs = fs,
		gps = gps,
		help = help,
		http = {},
		io = io,
		keys = keys,
		math = math,
		paintutils = paintutils,
		parallel = parallel,
		peripheral = peripheral,
		rednet = rednet,
		redstone = redstone,
		string = string,
		table = table,
		textutils = textutuls,
		vector = vector,
		window = window,


		--multishell = {},
		os = {
			version = function()
				return "Puzzletime WinCC [Version 0.15.5]"
			end,

			getComputerID = os.getComputerID,
			getComputerLabel = os.getComputerLabel,
			setComputerLabel = os.setComputerLabel,

			run = function(environment, programPath, args)
				args = args or {}
				if type(args) ~= "table" then
					args = {args}
				end

				local s = ""
				for i, v in ipairs(args) do
					s = s .. " " .. v
				end
				Shell(programPath .. s)
			end,

			loadAPI = os.loadAPI,
			unloadAPI = os.unloadAPI,
			pullEvent = pullEvent,

			pullEventRaw = function()
				return coroutine.yield()
			end,

			queueEvent = os.queueEvent,
			clock = os.clock,
			startTimer = os.startTimer,
			cancelTimer = os.cancelTimer,
			time = os.time,
			sleep = os.sleep,
			day = os.day,
			setAlarm = os.setAlarm,
			cancelAlarm = os.cancelAlarm,

			shutdown = function()
				processes[hwnd].kill = true
			end,

			reboot = function()
				processes[hwnd].kill = true
			end,
		},

		shell = {
			exit = function()
				processes[hwnd].kill = true
			end,

			dir = function()
				return pathutils.extractFilePath(processes[hwnd].fileName)
			end,

			setDir = function()
				-- TODO: Implement SetDir
			end,

			path = legacyShell.path,
			setPath = legacyShell.setPath,
			resolve = legacyShell.resolve,
			resolveProgram = legacyShell.resolveProgram,
			aliases = legacyShell.aliases,
			setAlias = legacyShell.setAlias,
			clearAlias = legacyShell.clearAlias,
			programs = legacyShell.programs,

			getRunningProgram = function()
				return processes[hwnd].fileName
			end,

			run = function(cmd, args)
				local args = args or {}
				local s = cmd
				for i, v in ipairs(args) do
					s = s .. " " .. v
				end
				Shell(programPath + s)
			end,

			openTab = function()
			end,

			switchTab = function()
			end,
		},
		term = nativeCanvas,
	}

	local env = {
		hwnd = hwnd,
		canvas = canvas,
		params = params,
		colors = colors,
		coroutine = coroutine,
		error = error,
		pcall = pcall,
		xpcall = xpcall,
		tostring = tostring,
		tonumber = tonumber,
		pairs = pairs,
		ipairs = ipairs,
		assert = assert,

		dofile = dofile,
		getfenv = getfenv,
		getmetatable = getmetatable,
		load = load,
		loadfile = loadfile,
		loadstring = loadstring,
		module = module,
		next = next,
		pcall = pcall,
		rawequal = rawequal,
		rawget = rawget,
		rawset = rawset,
		require = require,
		select = select,
		setfenv = setfenv,
		setmetatable = setmetatable,
		type = type,
		unpack = unpack,
		xpcall = xpcall,

		string = string,
		table = table,
		textutils = textutils,
		timer = timer,
		application = application,
		form = form,
		user = user,
		math = math,
		iniFiles = iniFiles,
		fs = fs, --------TODO: replace with alter rel
		keys = keys,
		bit = bit,
		parallel = parallel,
		peripheral = peripheral, -------------TODO: replace
		rednet = rednet, -----------------TODO: replace
		redstone = redstone,
		turtle = turtle,
		vector = vector,
		disk = disk,

		legacyEnv = legacyEnv,


		print = function(...)
			local printResult = ""

			for i, v in ipairs(arg) do
				printResult = printResult .. tostring(v)
			end

			canvas:print(printResult)
		end,

		term = {
			write = function(s)
				canvas:write(s)
			end,

			clear = function()
				canvas:fillrect(1, 1, canvas.size.x, canvas.size.y, canvas.bgcolor)
			end,

			clearLine = function()
				canvas:fillrect(1, canvas.cursorPos.y, canvas.size.x, 1, canvas.bgcolor)
			end,

			getCursorPos = function()
				return canvas:getCursorPos()
			end,

			setCursorPos = function(x, y)
				canvas:setCursorPos(x, y)
			end,

			setCursorBlink = function(bool)
				-- TODO
			end,

			isColor = function()
				return true
			end,

			getSize = function()
				return canvas.size.x, canvas.size.y
			end,

			scroll = function(n)
				-- TODO
			end,

			redirect = function(target)
				-- TODO
			end,

			setTextColor = function(color)
				canvas.forecolor = color
			end,

			setBackgroundColor = function(color)
				canvas.bgcolor = color
			end,
		},

		os = {
			sendMessage = SendMessage,
			getMessage = GetMessage,


			pullEvent = pullEvent,

			pullEventRaw = function()
				return coroutine.yield()
			end,

			startTimer = function(timeout, onTimer)
				timer.enabled = true
				timer.interval = timeout
				timer.onTimer = onTimer
			end,

			getValidHWNDList = function(onlyInTaskbar)
				local list = {}
				local i = 0

				for k, v in pairs(processes) do
					if onlyInTaskbar == true then
						if v.showInTaskbar then
							table.insert(list, k)
							i = i + 1
						end
					else
						table.insert(list, k)
						i = i + 1
					end
				end

				table.sort(list)

				--list.count = i
				return list
			end,

			setActiveProcess = function(hwnd)
				NEW_ACTIVE_PROCESS = hwnd
			end,

			getActiveProcess = function()
				return ACTIVE_PROCESS
			end,

			redirectTerm = function(obj)
				term.redirect(obj)
			end,

			restoreTerm = function()
				term.redirect(term.native())
			end,

			killProcess = function(hwnd)
				processes[hwnd].kill = true
			end,


			getRegistryBranches = function()
				iniFile = iniFiles.read("home:/" .. GetOsPath() .. "/System/Config/winDbg.ini")
				list = {}
				for k, v in pairs(iniFile) do
					table.insert(list, k)
				end
				return list
			end,

			getRegistryBranchKeys = function(branch)
				iniFile = iniFiles.read(GetOsPath() .. "/System/Config/winDbg.ini")
				list = {}
				for k, v in pairs(iniFile[branch] or {}) do
					table.insert(list, k)
				end
				return list
			end,

			getRegistryKeyValue = function(branch, key, default)
				iniFile = iniFiles.read(GetOsPath() .. "/System/Config/winDbg.ini")
				if iniFile[branch] ~= nil then
					return iniFile[branch][key] or default
				else
					return default
				end
			end,

			setRegistryKeyValue = function(branch, key, value)
				iniFile = iniFiles.read(GetOsPath() .. "/System/Config/winDbg.ini")
				if iniFile[branch] == nil then
					iniFile[branch] = {}
				end
				iniFile[branch][key] = value
				iniFiles.write(GetOsPath() .. "/System/Config/winDbg.ini", iniFile)
			end,


			listInstalledSoftware = function()
				local placeholder = {{title = "Notepad", path = GetOsPath() .. "/ProgramFiles/notepadorganizeMenu \"%FILENAME\""}}
				return placeholder
				-- ToDo: Installation registry
			end,


			shell = {
				run = Shell,

				expandEnvVar = function(envvar)

				end,

				shutdown = function()
					os.shutdown()
				end,

				restart = function(bootToShell)
					if bootToShell then
						local file = fs.open(".reboot", "w")
						file.write("LOADTO CRAFTOS")
						file.close()
					end

					os.reboot()
				end,
			},


			extractFilePath = pathutils.extractFilePath,
			extractFileName = pathutils.extractFileName,
			extractRealFileName = pathutils.extractRealFileName,


			messageBox = function(uType, text, caption, buttons, defText)
				if uType == "input" then
					processes[hwnd].message = dialogs.InputBoxCreate({ 
						uType = uType, 
						text = text, 
						caption = caption, 
						buttons = buttons, 
						defText = defText }, 
					screen, button)
				else
					processes[hwnd].message = dialogs.MessageBoxCreate({ 
						uType = uType, 
						text = text, 
						caption = caption, 
						buttons = buttons, 
						defText = defText }, 
					screen, button)
				end
			end,


			hideMessageBox = function()
				processes[hwnd].message = nil
				processes[hwnd].canvas.effect = nil
			end,


			getProcessInfo = function(pid)
				local info = GetProcessInfo(pid)

				if pid ~= hwnd then
					local pinfo = {}

					local pinfo = {
						canvas = info.canvas,
						hwnd = info.hwnd,
						fileName = info.fileName,
						title = info.title,
						showInTaskbar = info.showInTaskbar,
						etime = info.etime,
					}

					return pinfo
				else
					return info
				end
			end,

			getCurrentProcess = GetCurrentProcess,
			getSystemPath = GetOsPath,

			copyToClipboard = function(data, dType)
				clipboard.data = data
				clipboard.dType = dType
			end,

			pasteFromClipboard = function(dType)
				if (clipboard.dType == dType) or (dType == nil) then
					return clipboard.data
				else
					return nil
				end
			end,

			applyMagic = function(effect)
				screen.effect = effect
			end,

			getMagic = function()
				return screen.effect
			end,

			setCaretPos = function(x, y)
				CARETX = x
				CARETY = y
			end,

			showCaret = function()
				CARETV = true
			end,

			hideCaret = function()
				CARETV = false
			end,

			setCaretColor = function(color)
				CARETCOLOR = color
			end,


			findWindowByTitle = function(title)
				for k, v in pairs(processes) do
					if string.lower(v.title) == string.lower(title) then
						return k
					end
				end
			end,

			findWindowByFileName = function(fname)
				for k, v in pairs(processes) do
					if string.lower(v.fileName) == string.lower(fname) then
						return k
					end
				end
			end,


			loadAPI = os.loadAPI,
			unloadAPI = os.unloadAPI,
			time = os.time,
			clock = os.clock,
			
			getETime = function()
				return ETIME
			end,


			getProcessUsedMemory = function(pid, MAXDEPTH)
				local info

				if pid > 0 then
					info = GetProcessInfo(pid)
				end

				local depth = 0
				local size = 0


				local CHAR_SIZE = 1
				local NUMBER_SIZE = 16
				local POINTER_SIZE = 4
				local BOOLEAN_SIZE = 4

				local MAXDEPTH = MAXDEPTH or 100--128

				local table_sizes = {}
				local strings = {}


				local function getTableSize(t)
					local size = 0

					if table_sizes[t] ~= nil then return 0 else
						if table_sizes[t] == nil then
							for k, v in pairs(t) do
								if type(k) == "string" then
									size = size + 40
								else
									size = size + 16
								end
							end
						end

						if depth <= MAXDEPTH then
							for k, v in pairs(t) do
								if type(v) == "string" then
									if not strings[v] then
										size = size + 17 + string.len(v)
										strings[v] = true
									end
								elseif type(v) == "boolean" then
									size = size + 16
								elseif type(v) == "number" then
									size = size + 16
								elseif type(v) == "table" then
									depth = depth + 1
									if table_sizes[t] == nil then 
										size = size + 40 + getTableSize(v)
									end
									depth = depth - 1
								elseif type(v) == "function" then
									local env = getfenv(v)
									size = size + 20

									if env ~= nil then
										depth = depth + 1
										if table_sizes[t] == nil then 
											size = size + 40 + getTableSize(env)
										end
										depth = depth - 1
									end
								else
									size = size + 16
								end
							end
						end
					end

					table_sizes[t] = size
					return size or 0
				end


				--local env = getfenv(info.program)
				--if env ~= getfenv(0) then
				--	size = getTableSize(env) or 0
				--end
				if pid > 0 then
					getTableSize(getfenv(0))
					getTableSize(getfenv(1))
					local newSize = 0

					for i = 1, 512 do
						newSize = getTableSize(getfenv(info.program))
						size = size + newSize
					end
				else
					for i = 1, 512 do
						size = size + getTableSize(getfenv(0)) + getTableSize(getfenv(1))
					end
				end
				--if info.fullenv ~= nil then
					--size = getTableSize(getfenv())
					--size = getTableSize(info.fullenv)
				--end


				return size
			end,
		},

		widgets = {
			Label = label,
			Button = button,
			Edit = edit,
			ScrollBar = scrollBar,
			Panel = panel,
			ListView = listView,
			PopupMenu = popupMenu,
			MenuBar = menuBar,
			PaintBox = paintBox,
			FileListView = fileListView,
			ListBox = listBox,
			TextArea = textArea,
			SharedDocView = shdocvw,
			GLSurface = glSurface,
			CheckBox = checkbox,

			dialogs = {
				OpenDialog = openDialog,
				SaveDialog = saveDialog,
			},

			popupMenu = function(menu, x, y)
				lastMenu = menu
				menu.canvas = screen
				menu:popUp(x, y)
			end,
		},

		config = {
			DESKTOP_COLOR = config.desktop_color,
			PROCESS_TIMER = config.timer,
			AUTORUN = config.autorun,

		},
	}

	if kernelMode == true then
		env.kernel = {}

		env.kernel.kiRegisterEventReceiver = function(event)
			--table.insert(eventHandlers, event, hwnd)
			eventHandlers[event] = hwnd
		end

		env.kernel.kiUnRegisterEventReceiver = function(event)
			--table.remove(eventHandlers, event)
			eventHandlers[event] = nil
		end

		env.kernel.env = getfenv(1)
	end


	if process.legacyMode then
		setfenv(program, legacyEnv)
	else
		setfenv(program, env)
	end
	
	process.thread = coroutine.create(program)
	process.env = { timer = timer }
	process.fullenv = env

	processes[hwnd] = process
	--table.insert(plist, hwnd)
	return hwnd
end


local osPath = ...
function GetOsPath()
	--[[if fs.exists(".myospath") then
		file = fs.open(".myospath", "r")
		osPath = file.readAll()
		file.close()

		return osPath
	else
		write("myOs is not found on the main drive. Try reinstalling...")
		os.shutdown()
	end]]
	return osPath
end


function SendMessage(hwnd, message)
	table.insert(processes[hwnd].messages, message)
end


function GetMessage(hwnd)
	local result = table.remove(processes[hwnd].messages, 1)

	if result ~= nil then
		if processes[hwnd].iterations > PROCESS_MAX_ITERATIONS then
			processes[hwnd].iterations = 0
			--coroutine.yield()
		end

		processes[hwnd].iterations = processes[hwnd].iterations + 1
		return result
	else
		coroutine.yield()
		return GetMessage(hwnd)
	end
end




function Run(fileName, background, params, kernelMode)
	if params == nil then params = {} end
	params[1] = fileName

	local hwnd = CreateProcess(fileName, params, kernelMode)

	if not (background == false) then
		ACTIVE_PROCESS = hwnd
	end

	SendMessage(hwnd, { msg = "create" })

	return hwnd
end



function LoadConfig()
	if not fs.exists(GetOsPath() .. "/System/Config/winDbg.ini") then
		local c = {
			autorun = {

			},

			system = 
			{
				timer = 0.05,
				version = "0.9"
			},

			installed = 
			{
				Notepad = "notepad.exe \"%FILENAME%\"",
			},

			extensions = {
				lnk = "lnkview \"%FILENAME%\"",
			},

			desktop = {
				bgcolor = colors.black,
			},
		}

		iniFiles.write(GetOsPath() .. "/System/Config/winDbg.ini", c)
	end

	local c = iniFiles.read(GetOsPath() .. "/System/Config/winDbg.ini")
	config.timer = tonumber(c.system.timer)
	config.desktop_color = tonumber(c.desktop.bgcolor)
	config.extensions = c.extensions
	config.autorun = c.autorun
	config.version = c.system.version
end


cursorPos = 3

function Init()
	term.setBackgroundColor(colors.black)
	term.setTextColor(colors.white)
	term.clear()

	local oldLoadAPI = os.loadAPI

	os.loadAPI = function(path)
		if oldLoadAPI(path) then	          
			term.setCursorPos(1,1)
			term.setBackgroundColor(colors.white)
	        term.setTextColor(colors.black)
	        term.write(string.rep(" ", x))
	        centerText("Loading WinCC Files", 1)
			term.setCursorPos(1,19)
       		term.setBackgroundColor(colors.white)
            term.setTextColor(colors.black)
	    	term.write(string.rep(" ", x))
            term.setCursorPos(1,19)
            term.write(" Please wait...")
            term.setTextColor(colors.white)
            term.setBackgroundColor(colors.black)
			term.setCursorPos(1,18)
	    	term.write(string.rep("                  ", 18))
            term.setCursorPos(1, cursorPos)
            if string.len(path) > 42 then
				inputText = string.sub(path, string.len(path) - 37 + 2)
				print("Loaded: /.."..inputText.."")
			else
				inputText = ""..path..""
				print("Loaded: /"..inputText.."")
			end
            sleep(0.1)
			if cursorPos > 16 then
				term.clear()
				term.setBackgroundColor(colors.white)
		        term.setTextColor(colors.black)
		        term.setCursorPos(1,1)
		        term.write(string.rep(" ", x))
		        centerText("Loading WinCC Files", 1)
		        term.setBackgroundColor(colors.white)
	            term.setTextColor(colors.black)
	            term.setCursorPos(1,19)
		        term.write(string.rep(" ", x))
	            term.write(" Please wait...")
	            term.setTextColor(colors.white)
	            term.setBackgroundColor(colors.black)
				cursorPos = 2
			end
            cursorPos = cursorPos + 1
        else 
            term.setBackgroundColor(colors.black)
	        term.clear()
		   	sleep(0.1)
	        term.setCursorPos(1,1)
	        term.setBackgroundColor(colors.white)
	        term.setTextColor(colors.black)
	        term.write(string.rep(" ", x))
	        centerText("WinCC Boot Manager", 1)
            term.setCursorPos(1,3)
            term.setTextColor(colors.lightGray)
            term.setBackgroundColor(colors.black)
            print("WinCC Failed to start. A recent software change might be the cause.")
            print("")
            print("If you dont know how to fix this problem, contact your system administrator or computer manufacturer for assistance.")
			print("")
			term.setTextColor(colors.white)
			print("File: /"..path.."")
            print("")
            print("Status: Not found")
            print("")
            print("Info: WinCC failed to load because a critical")
			print("      system file is missing or broken.")
            term.setCursorPos(1,19)
	        term.setBackgroundColor(colors.white)
            term.setTextColor(colors.black)
	        term.write(string.rep(" ", x))
            term.setCursorPos(1,19)
            term.write(" ENTER=Continue")
            term.setCursorPos(0,0)
			read()
			term.setBackgroundColor(colors.black)
			term.clear()
		end
	end


	os.loadAPI(GetOsPath() .. "System/Drivers/user")
	os.loadAPI(GetOsPath() .. "System/Drivers/application")
	os.loadAPI(GetOsPath() .. "System/Drivers/form")
	os.loadAPI(GetOsPath() .. "System/Drivers/iniFiles")
	os.loadAPI(GetOsPath() .. "System/Drivers/pathutils")
	os.loadAPI(GetOsPath() .. "System/Drivers/dialogs")

	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/label")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/button")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/edit")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/scrollBar")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/panel")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/listView")

	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/popupMenu")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/menuBar")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/paintBox")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/fileListView")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/listBox")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/textArea")

	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/shdocvw")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/textView")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/glSurface")
	os.loadAPI(GetOsPath() .. "System/Drivers/widgets/checkbox")
	os.loadAPI(GetOsPath() .. "System/Drivers/cmnDialogs/openDialog")
	os.loadAPI(GetOsPath() .. "System/Drivers/cmnDialogs/saveDialog")
	os.loadAPI = oldLoadAPI
	LoadConfig()


	local x, y = term.getSize()
	screen = user.CreateCanvas(x, y)
	screen.autoScroll = false
	screen.showCursor = false


        clear()
        sleep(1.0)

	--screen.effect = user.CreateEffect_Acid()
	--screen.effect = user.CreateEffect_Shadow()


function printLogonScreen()
	function Ball()
		centerText("- Welcome", 10)
		sleep(0.07)
		centerText("\\ Welcome", 10)
		sleep(0.07)
		centerText("| Welcome", 10)
		sleep(0.07)
		centerText("/ Welcome", 10)
		sleep(0.07)
	end

	function printName1()
		term.setTextColor(colors.lightGray)
		centerText("#### WinCC 7 Ultimate", 18)
		term.setCursorPos(15,18)
		term.setTextColor(colors.green)
		term.write("#")
		term.setTextColor(colors.brown)
		term.write("#")
		term.setTextColor(colors.brown)
		term.write("#")
		term.setTextColor(colors.gray)
		term.write("#")
		term.setTextColor(colors.lightGray)
	end

	function printName2()
		term.setTextColor(colors.white)
		centerText("#### WinCC 7 Ultimate", 18)
		term.setCursorPos(15,18)
		term.setTextColor(colors.lime)
		term.write("#")
		term.setTextColor(colors.red)
		term.write("#")
		term.setTextColor(colors.yellow)
		term.write("#")
		term.setTextColor(colors.blue)
		term.write("#")
		term.setTextColor(colors.white)
	end

	--
    term.setBackgroundColor(colors.cyan)
    term.setTextColor(colors.white)
	term.clear()
	centerText("| Welcome", 10)
	printName2()
	sleep(0.07)
	centerText("/ Welcome", 10)
	sleep(0.07)
	Ball()
	Ball()
	Ball()
	Ball()
	centerText("- Welcome", 10)
	sleep(0.07)
	centerText("\\ Welcome", 10)
	sleep(0.07)
	centerText("| Welcome", 10)
	sleep(0.07)
    term.setBackgroundColor(colors.black)
    term.setTextColor(colors.black)
	clear()
end

printLogonScreen()

	HTTP_PROCESS = loadDrivers()
	TASKBAR_PROCESS = Run(GetOsPath() .. "/ProgramFiles/taskbar.exe")
	DESKTOP_PROCESS = Run(GetOsPath() .. "/ProgramFiles/desktop.exe")

	if fs.exists (GetOsPath() .. "/System/Drivers/dialogs") then
		if fs.exists(GetOsPath() .. "/System/messageDbg.exe") then
			MESSAGE_PROCESS = Run(GetOsPath() .. "/System/messageDbg.exe")
		end
	end

	Main()
end



function loadDrivers()
	local drivers = fs.list(GetOsPath() .. "/System/Drivers/")

	for i, v in ipairs(drivers) do
		if (user.stringends(v, ".exe")) and (not (fs.isDir(v))) then
			print(GetOsPath() .. "/System/Drivers/" .. v)
			Run(GetOsPath() .. "/System/Drivers/" .. v, nil, nil, true)
		end
	end
end





function ShellRun(name, cmd, path)
	local fileName = user.split(name, "%.")
	local fileExt = fileName[#fileName]


	if name == "shutdown" then
		running = false
	else
		if (fileExt == "exe") or (#fileName == 1) then
			for i, v in ipairs(path) do
				if (fs.exists(getPath(v) .. "/" .. name) and (fileExt == "exe")) or fs.exists(getPath(v) .. "/" .. name .. ".exe") then
					if #fileName == 1 then
						Run(getPath(v) .. "/" .. name .. ".exe", true, cmd)
                                --[[local image = paintutils.loadImage("WinCC/system/fadeui/1")
                                paintutils.drawImage(image, 1, 1)
                                local image = paintutils.loadImage("WinCC/system/fadeui/2")
                                paintutils.drawImage(image, 1, 1)
                                local image = paintutils.loadImage("WinCC/system/fadeui/3")
                                paintutils.drawImage(image, 1, 1)]]
					else
						Run(getPath(v) .. "/" .. name, true, cmd)
                                --[[local image = paintutils.loadImage("WinCC/system/fadeui/1")
                                paintutils.drawImage(image, 1, 1)
                                local image = paintutils.loadImage("WinCC/system/fadeui/2")
                                paintutils.drawImage(image, 1, 1)
                                local image = paintutils.loadImage("WinCC/system/fadeui/3")
                                paintutils.drawImage(image, 1, 1)]]
					end
					break
				end
			end
		else
			if config.extensions[fileExt] ~= nil then
				for i, v in ipairs(path) do
					if fs.exists(getPath(v) .. name) then
						Shell(string.gsub(config.extensions[fileExt], "%%FILENAME%%", v .. name))
						break
					end
				end
			end
		end
	end
end





function drawTaskbar()
	--screen:fillrect(1, screen.size.y, screen.size.x, 1, colors.lightGray)
	if TASKBAR_PROCESS > 0 then
		screen:draw(0, screen.size.y - 1, processes[TASKBAR_PROCESS].canvas)
	end
end


function drawMessage(message)
	--{ uType = uType, text = text, caption = caption, buttons = buttons, defText = defText }
	--local msgBox = dialogs.MessageBoxCreate(message, screen)
	message:refresh()
end




function Main()
	local timerId = os.startTimer(config.timer)
	local DestroyList = {}
	local destroy = {}


	--setmetatable(destroy, DestroyList)
	--DestroyList.__mode = "v"

	while running do
		local event, key, x, y, p2 = os.pullEventRaw()
		if (event == "timer") and (key == timerId) then
			local ostime = os.clock()

			if ACTIVE_PROCESS == TASKBAR_PROCESS then
				ACTIVE_PROCESS = 0
			end

			--print("")

			for hwnd, process in pairs(processes) do
				--print(hwnd, " ", coroutine.status(process.thread))
				local time = os.clock()
				

				if (not process.suspended) and (coroutine.status(process.thread) ~= "dead") then
					CURRENT_PROCESS = hwnd

					if process.env.timer.enabled then
						process.env.timer.value = process.env.timer.value + config.timer

						if process.env.timer.value > process.env.timer.interval then
							process.env.timer.value = 0
							if process.env.timer.onTimer ~= nil then process.env.timer.onTimer() end
						end
					end



					--run()
					--assert(run())

					
					--assert(coroutine.resume(process.thread))
					--process.etime = time - os.time()

					process.iterations = 0
					local status, message = pcall(function() assert(coroutine.resume(process.thread)) end)

					if not status then
						local text = message

						if string.len(text) > screen.size.x - 8 then
							local t1 = string.sub(text, 1, screen.size.x - 8)
							local t2 = string.sub(text, screen.size.x - 7)
							text = t1 .. "-\n" .. t2

							--[[text = ""
							local s = user.split(text, " ")
							local str = ""
							local i = 0

							for j = 1, #s do
								str = ""

								repeat
									i = i + 1
									str = str .. s[i]
								until string.len(str) > screen.size.x - 8

								text = text .. str .. "\n"
							end]]
						end


						processes[TASKBAR_PROCESS].message = 
								dialogs.MessageBoxCreate({ uType = "message", 
									text = text .. ";", 
									caption = pathutils.extractFileName(process.fileName),
									buttons = { { caption = "OK", onClick = function(sender) 
										processes[TASKBAR_PROCESS].message = nil
										processes[ACTIVE_PROCESS].canvas.effect = nil
									end } }, 
									defText = "" }, 
								screen, button)
						processes[TASKBAR_PROCESS].message.width = screen.size.x - 4
					end
				end

				process.etime = time - os.clock()

				if (coroutine.status(process.thread) == "dead") or (process.kill ~= nil) then
					table.insert(destroy, hwnd)
					if ACTIVE_PROCESS == hwnd then ACTIVE_PROCESS = DESKTOP_PROCESS end
				end
			end

			screen:clear()
			--drawTaskbar()

			if ACTIVE_PROCESS > 0 then
				if processes[ACTIVE_PROCESS].canvas ~= nil then
					if processes[ACTIVE_PROCESS].message ~= nil then
						processes[ACTIVE_PROCESS].canvas.effect = user.CreateEffect_Shadow()
						screen:draw(0, screen.size.y - processes[ACTIVE_PROCESS].canvas.size.y - 1, processes[ACTIVE_PROCESS].canvas, true)
						drawMessage(processes[ACTIVE_PROCESS].message)
					else
						screen:draw(0, screen.size.y - processes[ACTIVE_PROCESS].canvas.size.y - 1, processes[ACTIVE_PROCESS].canvas, true)
					end
					--term.setCursorPos(processes[ACTIVE_PROCESS].canvas.cursorPos.x, processes[ACTIVE_PROCESS].canvas.cursorPos.y)
				end
			end

			if lastMenu ~= nil then
				lastMenu:refresh()
			end

			drawTaskbar()

			if processes[TASKBAR_PROCESS].message ~= nil then
				processes[ACTIVE_PROCESS].canvas.effect = user.CreateEffect_Shadow()
				--screen:draw(0, screen.size.y - processes[TASKBAR_PROCESS].canvas.size.y - 1, processes[TASKBAR_PROCESS].canvas, true)
				drawMessage(processes[TASKBAR_PROCESS].message)
			end

			screen:render(0, 0)

			term.setCursorPos(CARETX, CARETY)
			term.setTextColor(CARETCOLOR)
			term.setCursorBlink(CARETV)

			if ACTIVE_PROCESS > 0 then
				--processes[ACTIVE_PROCESS].fullenv.legacyEnv.term.redraw()
				processes[ACTIVE_PROCESS].fullenv.legacyEnv.term.restoreCursor()
			end


			local x, y = term.getCursorPos()
			--term.setCursorPos(x, y + screen.size.y - processes[ACTIVE_PROCESS].canvas.size.y - 1)
			--screen:render(0, 0)


			for i, k in ipairs(destroy) do
				local process = k
				processes[k] = nil
			end

			destroy = {}


			if NEW_ACTIVE_PROCESS ~= 0 then
				table.insert(activeProcesses, ACTIVE_PROCESS)
				ACTIVE_PROCESS = NEW_ACTIVE_PROCESS
				NEW_ACTIVE_PROCESS = 0

				if ACTIVE_PROCESS < 0 then ACTIVE_PROCESS = DESKTOP_PROCESS end
			end


			ETIME = os.clock() - ostime
			timerId = os.startTimer(config.timer)
		else
			if event == "terminate" then
				Shell("taskmgr.exe")
				event = "refresh"
			end

			if (event == "key") or (event == "char") or (event == "mouse_click") or (event == "mouse_drag") then
				if ACTIVE_PROCESS > 0 then
					local char = ""
					if event == "char" then char = key end

					if (not ((event == "mouse_click") and (lastMenu ~= nil))) and processes[ACTIVE_PROCESS].message == nil then
						SendMessage(ACTIVE_PROCESS, { msg = event, key = key, char = char, button = key, x = x, y = y, n = y })
					else
						if processes[ACTIVE_PROCESS].message ~= nil then
							if event == "mouse_click" then
								if processes[ACTIVE_PROCESS].message.mouseClick ~= nil then
									processes[ACTIVE_PROCESS].message:mouseClick(key, x, y)
								end
							end

							if (event == "char") or (event == "key") then
								if processes[ACTIVE_PROCESS].message.keyPress ~= nil then
									char = key
									if event == "key" then char = "" end
									processes[ACTIVE_PROCESS].message:keyPress(key, char)
								end
							end
						end
					end
				end

				if TASKBAR_PROCESS > 0 then
					local char = ""
					if event == "char" then char = key end

					if not (type(y) == "number") then y = 0 end
					SendMessage(TASKBAR_PROCESS, { msg = event, key = key, char = char, button = key, x = x, y = y - screen.size.y + 1, n = y })

					if processes[TASKBAR_PROCESS].message ~= nil then
						if event == "mouse_click" then
							if processes[TASKBAR_PROCESS].message.mouseClick ~= nil then
								processes[TASKBAR_PROCESS].message:mouseClick(key, x, y)
							end
						end

						if event == "char" then
							if processes[TASKBAR_PROCESS].message.keyPress ~= nil then
								char = key
								processes[TASKBAR_PROCESS].message:keyPress(key, char)
							end
						end
					end
				end


				if event == "mouse_click" then
					if lastMenu ~= nil then
						lastMenu:mouseClick(button, x, y)
						if not lastMenu.showing then lastMenu = nil end
					end
				end
			else
				--error(event .. " " .. key)
				SendMessage(ACTIVE_PROCESS, {event, key, x, y, p2})
			end


			for k, v in pairs(eventHandlers) do
				if event == k then
					SendMessage(v, {msg = event, arg1 = key, arg2 = x, arg3 = y, arg4 = p2})
				end
			end

			--if (event == "http_failure") or (event == "http_success") then
			--	error(event .. " " .. key)
			--end

		end
	end

	Shutdown()
end



function Shutdown()
	term.setBackgroundColor(colors.black)
	term.clear()
	term.setCursorPos(1, 1)
end











function Load()
	term.clear()
	local status, err = pcall(Init)

	if not status then
		term.setBackgroundColor(colors.black)
		term.clear()
		sleep(0.7)
		term.setBackgroundColor(colors.blue)
		term.setTextColor(colors.white)
		term.clear()
		term.setCursorPos(1, 1)

		local t = {}
		local i = 0

		for token in string.gmatch(err, "(%w+):(%w+)") do
			table.insert(t, token)
			i = i + 1
		end

		local moduleName = t[1]

		print("A problem has been detected and WinCC has been shut down to prevent damage to your computer. ")
		print("")
		print("" .. moduleName .. "_module_crash")
		print("")
		print("If this is the first time you have seen this error, restart your computer. Otherwise, contact software developer or server administrator for more details regarding this error.")
		print("")
		print("Technical information:")
		print("")
		print("*** "..err.."")
		print("")
		print("Press [Enter] to reboot.")
		term.setCursorPos(0,0)
		read()
		os.reboot()
		--Load()
	end
end



Load()